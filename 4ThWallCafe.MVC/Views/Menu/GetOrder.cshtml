@model GetOrderModel

@{
	ViewData["Title"] = "Menu";
}
@{
	var timeSlots = new Dictionary<int, string>
					{
					{ 1, "Breakfast" },
					{ 2, "Lunch" },
					{ 3, "Happy Hour" },
					{ 4, "Dinner" }
					};
	var selectedTime = timeSlots.FirstOrDefault(x => x.Value == Model.TimeOfDayName).Key;
}
<div class="container mt-5">
	<h2 class="text-center fw-bold mb-4" style="color: #4a342e;">☕ Our Menu</h2>
	<div class="row justify-content-center mb-4">
		<div class="col-md-10 d-flex justify-content-between align-items-center flex-wrap">
			<form asp-action="GetOrder" asp-controller="Menu" method="post" class="d-flex align-items-center gap-2">
				<label for="timeOfDay" class="form-label fw-semibold text-muted mb-0">
					Select Time of Day - Currently Showing:
				</label>

				<select id="timeOfDay" name="id" class="form-select form-select-sm w-auto" onchange="this.form.submit()">
					@foreach (var timeSlot in timeSlots)
					{
						<option value="@timeSlot.Key" selected="@(timeSlot.Key == selectedTime ? "selected" : null)">
							@timeSlot.Value
						</option>
					}
				</select>
			</form>
			<form asp-action="GetOrder" asp-controller="Menu" method="get" class="d-flex align-items-center gap-2 ms-auto">
				<input type="text" name="searchName" class="form-control form-control-sm" placeholder="Search item..." style="max-width: 200px;" />
				<button type="submit" class="btn btn-sm btn-outline-primary">Search</button>
			</form>
		</div>
	</div>

	<div class="row row-cols-1 row-cols-md-3 g-4">
		@foreach (var item in Model.Items)
		{
			var safeId = "quantity_" + item.ItemPriceID;
			<div class="col">
				<div class="card menu-card shadow-sm h-100">
					@{
						var imageId = item.ItemID > 40 ? new Random().Next(1, 41) : item.ItemID;
					}

					<img src="@Url.Content($"~/Images/{imageId}.jpg")" class="card-img-top img-fluid lazyload" alt="@item.ItemName">
					<div class="card-body">
						<h5 class="card-title fw-bold text-dark">@item.ItemName</h5>
						<h6 class="card-subtitle mb-2 text-muted">@item.CategoryName</h6>
						<p class="card-text">@item.ItemDescription</p>
						<p><strong>Price:</strong> <span class="text-success fw-bold">$@item.Price.ToString("0.00")</span></p>
						<p><strong>Available:</strong> @item.TimeOfDayName</p>
						<p class="text-muted">
							<small>
								<strong>Starts:</strong> @item.StartDate.ToString("MMMM dd, yyyy")
								@if (item.EndDate.HasValue)
								{
									<br />

									<strong>Ends:</strong> @item.EndDate.Value.ToString("MMMM dd, yyyy")
								}
							</small>
						</p>

						<form asp-action="AddToCart" asp-controller="Cart" asp-route-id="@item.TimeOfDayName" method="post" class="add-to-cart-form">
							<input type="hidden" name="ItemId" value="@item.ItemID">
							<label for="quantity_@safeId">Quantity</label>
							<div class="form-floating mb-3">
								<div class="quantity-container">
									<button type="button" class="quantity-btn"
											onclick="changeQuantity(-1, 'quantity_@safeId')">
										-
									</button>

									<input type="number" class="quantity-input"
										   id="quantity_@safeId"
										   name="Quantity"
										   value="1"
										   min="1"
										   max="15"
										   step="1"
										   readonly />

									<button type="button" class="quantity-btn"
											onclick="changeQuantity(1, 'quantity_@safeId')">
										+
									</button>
								</div>
							</div>
							<button type="submit" class="btn btn-add-cart">🛒 Add to Cart</button>
						</form>
					</div>
				</div>
			</div>
		}
	</div>
</div>

<style>
	.card.h-100 {
		display: flex;
		flex-direction: column;
	}

	.card-body {
		flex: 1;
		display: flex;
		flex-direction: column;
		justify-content: space-between;
	}

	.quantity-container {
		display: inline-flex; 
		align-items: center; 
		gap: 4px; 
	}

	
	.quantity-btn {
		font-size: 0.9rem;
		padding: 0.2rem 0.6rem; 
		margin: 0;
		border: 1px solid #4a342e;
		border-radius: 4px;
		background-color: #f8f9fa;
		color: #4a342e;
		cursor: pointer;
		transition: background-color 0.2s ease;
	}

		.quantity-btn:hover {
			background-color: #4a342e;
			color: #fff;
		}

	
	.quantity-input {
		width: 40px; 
		text-align: center; 
		font-size: 0.9rem;
		border: 1px solid #4a342e;
		border-radius: 4px;
		font-weight: normal;
		background-color: #fff;
		color: #000;
		padding: 0.2rem;
		margin: 0;
	}

</style>

<script>
		function changeQuantity(amount, inputId) {
		const input = document.getElementById(inputId);
		const currentValue = parseInt(input.value, 10);
		const minValue = parseInt(input.min, 10);
		const maxValue = parseInt(input.max, 10);
		let newValue = currentValue + amount;
		if (newValue >= minValue && newValue <= maxValue) {
			input.value = newValue;
		}
	}
</script>